
services:
  # Configuration du service backend
  backend:
    build: ./backend
    ports:
      - "8080:8080"  # Exposition du port du backend
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network  # Réseau partagé entre les services
    restart: always
    entrypoint: ["sh", "-c", "java -jar app.jar"]

    healthcheck:
      test: ["CMD", "bash", "-c", "echo -e \"GET / HTTP/1.1\r\nHost: localhost\r\n\r\n\" > /dev/tcp/localhost/8080"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s

  # Configuration du service frontend
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"  # Exposition du port du frontend
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network  # Même réseau que le backend

  # Configuration du service de base de données PostgreSQL
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=clientmanagement
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=azerty
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    command: [
      "postgres",
      "-c", "password_encryption=scram-sha-256",
      "-c", "listen_addresses=*"
    ]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

# Définition du réseau pour la communication inter-services
networks:
  app-network:
    driver: bridge

# Définition des volumes pour la persistance des données
volumes:
  postgres_data: